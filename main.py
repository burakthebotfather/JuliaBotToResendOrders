import asyncio
import re
import os
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)

API_TOKEN = os.getenv("BOT_TOKEN", "YOUR_TOKEN_HERE")
UNIQUE_USER_ID = int(os.getenv("UNIQUE_USER_ID", 542345855))

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+3)
TZ = ZoneInfo("Europe/Minsk")

# chat_id -> thread_id (—Å–æ—Ö—Ä–∞–Ω–∏–ª –≤—Å–µ, –∫–∞–∫ —É —Ç–µ–±—è)
ALLOWED_THREADS = {
    -1002079167705: 7340,
    -1002387655137: 9,
    -1002423500927: 4,
    -1002178818697: 4,
    -1002477650634: 4,
    -1002660511483: 4,
    -1002864795738: 4,
    -1002360529455: 4,
    -1002538985387: 4,
}

# chat_id -> readable name (–∫–∞–∫ —É —Ç–µ–±—è)
CHAT_NAMES = {
    -1002079167705: "A. Mousse Art Bakery - –ë–µ–ª–∏–Ω—Å–∫–æ–≥–æ, 23",
    -1002387655137: "B. Millionroz.by - –¢–∏–º–∏—Ä—è–∑–µ–≤–∞, 67",
    -1002423500927: "E. Flovi.Studio - –¢–∏–º–∏—Ä—è–∑–µ–≤–∞, 65–ë",
    -1002178818697: "H. Kudesnica.by - –°—Ç–∞—Ä–æ–≤–∏–ª–µ–Ω—Å–∫–∏–π —Ç—Ä–∞–∫—Ç, 10",
    -1002477650634: "I. Cvetok.by - –í–æ—Å—Ç–æ—á–Ω–∞—è, 41",
    -1002660511483: "K. Pastel Flowers - –°—É—Ä–≥–∞–Ω–æ–≤–∞, 31",
    -1002864795738: "G. –¶–≤–µ—Ç—ã –ú–∏—Ä–∞ - –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è, 6",
    -1002360529455: "333. –¢–ï–°–¢ –ë–û–¢–û–í - 1-–π –ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π –ø—Ä-–¥",
    -1002538985387: "L. Lamour.by - –ö—Ä–æ–ø–æ—Ç–∫–∏–Ω–∞, 84",
}

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –°—á—ë—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –ø–æ –¥–∞—Ç–µ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
message_counter = {"date": None, "count": 0}


def get_request_number():
    today = datetime.now(TZ).strftime("%d.%m.%Y")
    if message_counter["date"] != today:
        message_counter["date"] = today
        message_counter["count"] = 0
    message_counter["count"] += 1
    return f"{message_counter['count']:02d} / {today}"


def is_night_time() -> bool:
    now = datetime.now(TZ).time()
    return now >= datetime.strptime("22:00", "%H:%M").time() or now < datetime.strptime("08:00", "%H:%M").time()


def validate_contact(text: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 'ok', 'missing', 'invalid'"""
    if not text:
        return "missing"
    cleaned = text.replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    belarus_pattern = re.compile(r"(\+375\d{9}|80(25|29|33|44)\d{7})")
    if belarus_pattern.search(cleaned):
        return "ok"
    if "@" in text:
        return "ok"
    if re.search(r"\+?\d{7,}", cleaned):
        return "invalid"
    return "missing"


# mapping: admin_sent_message_id -> { orig_chat_id, orig_msg_id, (optionally other fields) }
assign_mapping: dict[int, dict] = {}

# –£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥
async def delete_messages_later(chat_id: int, message_ids: list[int], delay: int = 300):
    await asyncio.sleep(delay)
    for m_id in message_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=m_id)
        except Exception:
            pass


@dp.message(F.chat.id.in_(ALLOWED_THREADS.keys()))
async def handle_message(message: Message):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤."""
    # —Ñ–∏–ª—å—Ç—Ä —Ç—Ä–µ–¥–∞
    if message.message_thread_id != ALLOWED_THREADS.get(message.chat.id):
        return

    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    if len(message.text or "") < 50:
        return

    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id == UNIQUE_USER_ID:
        return

    status = validate_contact(message.text or "")
    night = is_night_time()

    # –ï—Å–ª–∏ –Ω–µ –Ω–æ—á—å –∏ —Å—Ç–∞—Ç—É—Å == 'ok' ‚Äî *–Ω–µ* –æ—Ç–≤–µ—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (missing/invalid) –∏–ª–∏ –ø—Ä–∏ –Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äî –æ—Å—Ç–∞–≤–∏–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ,
    # –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî —Å–∫–∞–∂–∏).
    if night:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∂–Ω–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –Ω–æ—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç–µ, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Å –ø–æ–º–µ—Ç–∫–æ–π.
        reply_text = "–£–∂–µ –Ω–µ –æ–Ω–ª–∞–π–Ω üåÉ\n–ù–∞–∫–∞–ø–ª–∏–≤–∞—é –∑–∞—è–≤–∫–∏ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º —É—Ç—Ä–æ–º."
        try:
            await message.reply(reply_text)
        except Exception:
            pass
    else:
        # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å != ok ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
        if status == "ok":
            # –ù–ï –ø—Ä–∏—Å—ã–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É." ‚Äî –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç —É –∞–¥–º–∏–Ω–∞
            pass
        elif status == "missing":
            reply_text = (
                "–ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. "
                "–î–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é. "
                "–†–∏—Å–∫–∏ - –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ."
            )
            try:
                await message.reply(reply_text)
            except Exception:
                pass
        else:  # invalid
            reply_text = (
                "–ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. "
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∑–∞—è–≤–∫–µ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375–•–•–•–•–•–•–•–•–• –∏–ª–∏ –Ω–∏–∫ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–º–≤–æ–ª @."
            )
            try:
                await message.reply(reply_text)
            except Exception:
                pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å)
    request_number = get_request_number()
    chat_name = CHAT_NAMES.get(message.chat.id, f"Chat {message.chat.id}")
    header = f"{request_number}\n{chat_name}\n\n"
    forward_body = header + (message.text or "")
    if status == "invalid":
        forward_body = "‚ùå –û–¢–ö–õ–û–ù–ï–ù ‚ùå\n\n" + forward_body
    if night:
        forward_body = "–ù–û–ß–ù–û–ô –ó–ê–ö–ê–ó üåô\n\n" + forward_body

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data="decision:accept"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="decision:reject"),
        ]
    ])

    sent = await bot.send_message(
        UNIQUE_USER_ID,
        forward_body,
        reply_markup=kb,
        disable_notification=night,
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å admin_msg_id -> –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç+—Å–æ–æ–±—â–µ–Ω–∏–µ
    assign_mapping[sent.message_id] = {
        "orig_chat_id": message.chat.id,
        "orig_msg_id": message.message_id,
    }


@dp.callback_query(F.data.startswith("decision:"))
async def handle_decision(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ü—Ä–∏–Ω—è—Ç—å' / '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' –∞–¥–º–∏–Ω–æ–º."""
    # admin message id (—ç—Ç–æ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞)
    admin_msg_id = callback.message.message_id
    info = assign_mapping.get(admin_msg_id)
    if not info:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    action = callback.data.split(":", 1)[1]  # "accept" –∏–ª–∏ "reject"
    orig_chat_id = info["orig_chat_id"]
    orig_msg_id = info["orig_msg_id"]

    if action == "accept":
        reply_text = "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É."
        popup = "–û—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—ã–π."
    else:
        reply_text = "–ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."
        popup = "–û—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π."

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç (reply –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
    try:
        await bot.send_message(
            orig_chat_id,
            reply_text,
            reply_to_message_id=orig_msg_id,
        )
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç: {e}", show_alert=True)
        return

    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π —É –∞–¥–º–∏–Ω–∞ (—á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å —Å–Ω–æ–≤–∞)
    try:
        await bot.edit_message_reply_markup(chat_id=UNIQUE_USER_ID, message_id=admin_msg_id, reply_markup=None)
    except Exception:
        pass

    await callback.answer(popup)


@dp.message(F.from_user.id == UNIQUE_USER_ID, F.reply_to_message)
async def handle_admin_assign_reply(message: Message):
    """
    –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –≤ –õ–°, —É–∫–∞–∑—ã–≤–∞—è @username.
    –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è @username' (reply –∫ –∑–∞—è–≤–∫–µ).
    –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —Å @username –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–æ—Ç–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç,
    —á—Ç–æ–±—ã –≤ –õ–° –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏.
    """
    reply_to = message.reply_to_message
    if not reply_to:
        return

    admin_sent_msg_id = reply_to.message_id
    info = assign_mapping.get(admin_sent_msg_id)
    if not info:
        await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    target = (message.text or "").strip()
    if not target.startswith("@") or " " in target:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤).")
        return

    orig_chat_id = info["orig_chat_id"]
    orig_msg_id = info["orig_msg_id"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç (reply –∫ –∑–∞—è–≤–∫–µ)
    try:
        await bot.send_message(
            orig_chat_id,
            f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è {target}",
            reply_to_message_id=orig_msg_id,
        )
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ:
    try:
        confirm = await message.reply("–ì–æ—Ç–æ–≤–æ ‚Äî —É–≤–µ–¥–æ–º–∏–ª —á–∞—Ç.")
    except Exception:
        confirm = None

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ: —Å–∞–º admin message (—Å @username) –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    to_delete = [message.message_id]
    if confirm:
        to_delete.append(confirm.message_id)

    asyncio.create_task(delete_messages_later(UNIQUE_USER_ID, to_delete, delay=5 * 60))

    # (–û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∞–¥–º–∏–Ω–∞ –≤ –õ–° ‚Äî –æ–Ω–∞ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –≤–∏–¥–µ–ª –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
