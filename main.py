import asyncio
import re
import os
from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)

API_TOKEN = os.getenv("BOT_TOKEN", "YOUR_TOKEN_HERE")
UNIQUE_USER_ID = int(os.getenv("UNIQUE_USER_ID", 542345855))

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+3)
TZ = ZoneInfo("Europe/Minsk")

# chat_id -> thread_id
ALLOWED_THREADS = {
    -1002079167705: 7340,
    -1002387655137: 9,
    -1002423500927: 4,
    -1002178818697: 4,
    -1002477650634: 4,
    -1002660511483: 4,
    -1002864795738: 4,
    -1002360529455: 4,
    -1002538985387: 4,
}

# chat_id -> readable name
CHAT_NAMES = {
    -1002079167705: "A. Mousse Art Bakery - –ë–µ–ª–∏–Ω—Å–∫–æ–≥–æ, 23",
    -1002387655137: "B. Millionroz.by - –¢–∏–º–∏—Ä—è–∑–µ–≤–∞, 67",
    -1002423500927: "E. Flovi.Studio - –¢–∏–º–∏—Ä—è–∑–µ–≤–∞, 65–ë",
    -1002178818697: "H. Kudesnica.by - –°—Ç–∞—Ä–æ–≤–∏–ª–µ–Ω—Å–∫–∏–π —Ç—Ä–∞–∫—Ç, 10",
    -1002477650634: "I. Cvetok.by - –í–æ—Å—Ç–æ—á–Ω–∞—è, 41",
    -1002660511483: "K. Pastel Flowers - –°—É—Ä–≥–∞–Ω–æ–≤–∞, 31",
    -1002864795738: "G. –¶–≤–µ—Ç—ã –ú–∏—Ä–∞ - –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è, 6",
    -1002360529455: "333. –¢–ï–°–¢ –ë–û–¢–û–í - 1-–π –ù–∞–≥–∞—Ç–∏–Ω—Å–∫–∏–π –ø—Ä-–¥",
    -1002538985387: "L. Lamour.by - –ö—Ä–æ–ø–æ—Ç–∫–∏–Ω–∞, 84",
}

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –°—á—ë—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –ø–æ –¥–∞—Ç–µ
message_counter = {"date": None, "count": 0}

# admin_msg_id -> {orig_chat_id, orig_msg_id, accept_reply_id (–µ—Å–ª–∏ –µ—Å—Ç—å)}
assign_mapping: dict[int, dict] = {}


def get_request_number():
    today = datetime.now(TZ).strftime("%d.%m.%Y")
    if message_counter["date"] != today:
        message_counter["date"] = today
        message_counter["count"] = 0
    message_counter["count"] += 1
    return f"{message_counter['count']:02d} / {today}"


def is_night_time() -> bool:
    now = datetime.now(TZ).time()
    return now >= datetime.strptime("22:00", "%H:%M").time() or now < datetime.strptime("08:00", "%H:%M").time()


def validate_contact(text: str) -> str:
    if not text:
        return "missing"
    cleaned = text.replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    belarus_pattern = re.compile(r"(\+375\d{9}|80(25|29|33|44)\d{7})")
    if belarus_pattern.search(cleaned):
        return "ok"
    if "@" in text:
        return "ok"
    if re.search(r"\+?\d{7,}", cleaned):
        return "invalid"
    return "missing"


async def delete_messages_later(chat_id: int, message_ids: list[int], delay: int = 300):
    await asyncio.sleep(delay)
    for m_id in message_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=m_id)
        except Exception:
            pass


@dp.message(F.chat.id.in_(ALLOWED_THREADS.keys()))
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –∏–∑ —á–∞—Ç–æ–≤."""
    if message.message_thread_id != ALLOWED_THREADS.get(message.chat.id):
        return
    if len(message.text or "") < 50:
        return
    if message.from_user.id == UNIQUE_USER_ID:
        return

    status = validate_contact(message.text or "")
    night = is_night_time()

    # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ—á—å –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    accept_reply_id = None
    if night:
        reply_text = "–£–∂–µ –Ω–µ –æ–Ω–ª–∞–π–Ω üåÉ\n–ù–∞–∫–∞–ø–ª–∏–≤–∞—é –∑–∞—è–≤–∫–∏ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º —É—Ç—Ä–æ–º."
        try:
            await message.reply(reply_text)
        except Exception:
            pass
    else:
        if status == "ok":
            # –ñ–¥—ë–º —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
            pass
        elif status == "missing":
            reply_text = (
                "–ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. "
                "–î–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é. "
                "–†–∏—Å–∫–∏ - –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ."
            )
            try:
                await message.reply(reply_text)
            except Exception:
                pass
        else:
            reply_text = (
                "–ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. "
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∑–∞—è–≤–∫–µ —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375–•–•–•–•–•–•–•–•–• –∏–ª–∏ –Ω–∏–∫ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–º–≤–æ–ª @."
            )
            try:
                await message.reply(reply_text)
            except Exception:
                pass

    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∞–¥–º–∏–Ω—É
    request_number = get_request_number()
    chat_name = CHAT_NAMES.get(message.chat.id, f"Chat {message.chat.id}")
    header = f"{request_number}\n{chat_name}\n\n"
    forward_body = header + (message.text or "")
    if status == "invalid":
        forward_body = "‚ùå –û–¢–ö–õ–û–ù–ï–ù ‚ùå\n\n" + forward_body
    if night:
        forward_body = "–ù–û–ß–ù–û–ô –ó–ê–ö–ê–ó üåô\n\n" + forward_body

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="decision:accept"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decision:reject"),
        ],
        [InlineKeyboardButton(text="üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data="decision:done")]
    ])

    sent = await bot.send_message(
        UNIQUE_USER_ID,
        forward_body,
        reply_markup=kb,
        disable_notification=night,
    )

    assign_mapping[sent.message_id] = {
        "orig_chat_id": message.chat.id,
        "orig_msg_id": message.message_id,
        "accept_reply_id": None,  # —Å—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º id "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    }


@dp.callback_query(F.data.startswith("decision:"))
async def handle_decision(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—è—Ç/–æ—Ç–∫–ª–æ–Ω—ë–Ω/–≤—ã–ø–æ–ª–Ω–µ–Ω."""
    admin_msg_id = callback.message.message_id
    info = assign_mapping.get(admin_msg_id)
    if not info:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    action = callback.data.split(":", 1)[1]
    orig_chat_id = info["orig_chat_id"]
    orig_msg_id = info["orig_msg_id"]

    if action == "accept":
        reply_text = "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É."
        try:
            sent = await bot.send_message(orig_chat_id, reply_text, reply_to_message_id=orig_msg_id)
            info["accept_reply_id"] = sent.message_id
        except Exception:
            pass
        popup = "–û—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—ã–π."
    elif action == "reject":
        reply_text = "–ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."
        try:
            await bot.send_message(orig_chat_id, reply_text, reply_to_message_id=orig_msg_id)
        except Exception:
            pass
        popup = "–û—Ç–º–µ—Ç–∏–ª –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π."
    else:  # done
        try:
            await bot.delete_message(chat_id=UNIQUE_USER_ID, message_id=admin_msg_id)
        except Exception:
            pass
        assign_mapping.pop(admin_msg_id, None)
        await callback.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        return

    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –∫–∞—Ä—Ç–æ—á–∫–∏
    try:
        await bot.edit_message_reply_markup(chat_id=UNIQUE_USER_ID, message_id=admin_msg_id, reply_markup=None)
    except Exception:
        pass

    assign_mapping[admin_msg_id] = info
    await callback.answer(popup)


@dp.message(F.from_user.id == UNIQUE_USER_ID, F.reply_to_message)
async def handle_admin_assign_reply(message: Message):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ @username."""
    reply_to = message.reply_to_message
    if not reply_to:
        return

    admin_sent_msg_id = reply_to.message_id
    info = assign_mapping.get(admin_sent_msg_id)
    if not info:
        await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    target = (message.text or "").strip()
    if not target.startswith("@") or " " in target:
        await message.reply("–£–∫–∞–∂–∏ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.")
        return

    orig_chat_id = info["orig_chat_id"]
    orig_msg_id = info["orig_msg_id"]

    # –£–¥–∞–ª—è–µ–º "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç..." –µ—Å–ª–∏ –±—ã–ª
    accept_reply_id = info.get("accept_reply_id")
    if accept_reply_id:
        try:
            await bot.delete_message(chat_id=orig_chat_id, message_id=accept_reply_id)
        except Exception:
            pass
        info["accept_reply_id"] = None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è ..."
    try:
        await bot.send_message(
            orig_chat_id,
            f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è {target}",
            reply_to_message_id=orig_msg_id,
        )
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞: {e}")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        confirm = await message.reply("–ì–æ—Ç–æ–≤–æ ‚Äî —É–≤–µ–¥–æ–º–∏–ª —á–∞—Ç.")
    except Exception:
        confirm = None

    # –£–¥–∞–ª–∏–º @username + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    to_delete = [message.message_id]
    if confirm:
        to_delete.append(confirm.message_id)
    asyncio.create_task(delete_messages_later(UNIQUE_USER_ID, to_delete, delay=5 * 60))

    assign_mapping[admin_sent_msg_id] = info


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
